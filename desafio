<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Desafio 30 Dias de Hobbies</title>
  <meta name="description" content="Complete 20 hobbies em 30 dias. Escolha 20 dentre 60, acompanhe o progresso e receba sugest√µes de atividades para cada hobby." />
  <style>
    /* (CSS permanece igual, sem altera√ß√µes) */
  </style>
</head>
<body>
  <!-- (HTML permanece igual) -->

  <script>
  // ------------------------ Dados base ------------------------
  const HOBBIES = [
    // ... (lista de hobbies igual)
  ];

  const LIMIT = 20;
  const DURATION_DAYS = 30;
  const STORAGE_KEY = 'd30-hobbies-state-v1';

  // ------------------------ Estado ------------------------
  const State = {
    startedAt: null, // timestamp
    deadline: null, // timestamp
    selected: [], // [{name, tips, done, doneAt}]
  };

  function loadState(){
    try{
      const raw = localStorage.getItem(STORAGE_KEY);
      if(!raw) return null;
      const s = JSON.parse(raw);
      if(s && Array.isArray(s.selected)) return s;
      return null;
    }catch(e){return null}
  }
  function saveState(){
    localStorage.setItem(STORAGE_KEY, JSON.stringify(State));
  }
  function resetAll(){
    localStorage.removeItem(STORAGE_KEY);
    location.reload();
  }

  const $ = (q,root=document)=>root.querySelector(q);
  const $$ = (q,root=document)=>[...root.querySelectorAll(q)];
  const views = {home:$('#view-home'), select:$('#view-select'), dash:$('#view-dash'), result:$('#view-result')};
  function show(id){
    Object.values(views).forEach(v=>v.classList.add('hidden'));
    views[id].classList.remove('hidden');
  }

  // ------------------------ Home ------------------------
  $('#btn-start').addEventListener('click', ()=>{
    const existing = loadState();
    if(existing){
      Object.assign(State, existing);
      hydrateDashboard();
      show('dash');
      return;
    }
    show('select');
    renderSelection();
  });

  (function initHome(){
    const s = loadState();
    if(!s) return;
    $('#resume').style.display='grid';
    const done = s.selected.filter(h=>h.done).length;
    $('#resume-completed').textContent = `${done}/${LIMIT}`;
    updateCountdownLabels(s.deadline, $('#resume-left'));
  })();

  // ------------------------ Sele√ß√£o ------------------------
  function renderSelection(){
    const grid = $('#select-grid');
    grid.innerHTML='';
    HOBBIES.forEach((hobby, idx)=>{
      const item = document.createElement('div');
      item.className='hobby-item';
      item.innerHTML = `
        <input type="checkbox" id="h${idx}" data-idx="${idx}"/>
        <label for="h${idx}" style="flex:1">
          <div class="hobby-name">${hobby.name}</div>
          <details class="suggestions" style="margin-top:6px">
            <summary class="pill">Sugest√µes üí°</summary>
            <ul class="suggest">
              ${hobby.tips.map(t=>`<li>${t}</li>`).join('')}
            </ul>
          </details>
        </label>
        <div class="hobby-actions">
          <button class="btn ghost btn-tip" type="button">Ver sugest√µes</button>
        </div>`;
      grid.appendChild(item);

      item.querySelector('.btn-tip').addEventListener('click',()=>{
        const det = item.querySelector('details');
        det.open = !det.open;
      });
    });

    grid.addEventListener('change', onChangeSelection);
  }

  function onChangeSelection(){
    const checked = $$('#select-grid input[type="checkbox"]:checked');
    if(checked.length > LIMIT){
      const last = checked[checked.length-1];
      last.checked = false;
      return;
    }
    $('#count-selected').textContent = `${checked.length}/${LIMIT} selecionados`;
    $('#btn-confirm').disabled = checked.length !== LIMIT;
  }

  $('#btn-confirm').addEventListener('click', ()=>{
    const selectedIdx = $$('#select-grid input[type="checkbox"]:checked').map(el=>+el.dataset.idx);
    State.selected = selectedIdx.map(i=>({ name: HOBBIES[i].name, tips: HOBBIES[i].tips, done:false, doneAt:null }));
    const now = Date.now();
    State.startedAt = now;
    State.deadline = now + DURATION_DAYS*24*60*60*1000;
    saveState();
    hydrateDashboard();
    show('dash');
  });

  // ------------------------ Dashboard ------------------------
  let countdownTimer = null;

  function hydrateDashboard(){
    const grid = $('#dash-grid');
    grid.innerHTML='';
    State.selected.forEach((h, i)=>{
      const card = document.createElement('div');
      card.className='hobby-card';
      const status = h.done ? '<span class="pill done">Conclu√≠do</span>' : '<span class="pill">Pendente</span>';
      card.innerHTML = `
        <header>
          <strong>${h.name}</strong>
          ${status}
        </header>
        <details class="suggestions">
          <summary class="pill">Sugest√µes para praticar üí°</summary>
          <ul class="suggest">${h.tips.map(t=>`<li>${t}</li>`).join('')}</ul>
        </details>
        <div style="display:flex;gap:10px;align-items:center;flex-wrap:wrap">
          <button class="btn ${h.done? 'secondary' : ''}" data-idx="${i}" ${h.done? 'aria-pressed="true"' : ''}>${h.done? 'Desfazer' : 'Conclu√≠do ‚úÖ'}</button>
          ${h.done? `<span class="pill">Feito em ${new Date(h.doneAt).toLocaleDateString()}</span>` : ''}
        </div>`;
      grid.appendChild(card);
    });

    // ‚úÖ corrigido: sem { once: true }
    grid.addEventListener('click', (e)=>{
      const btn = e.target.closest('button.btn');
      if(!btn) return;
      const i = +btn.dataset.idx;
      const h = State.selected[i];
      h.done = !h.done;
      h.doneAt = h.done ? Date.now() : null;
      saveState();
      updateProgressUI();
      hydrateDashboard();
      maybeFinish();
    });

    updateProgressUI();

    clearInterval(countdownTimer);
    countdownTimer = setInterval(()=>{
      updateCountdownLabels(State.deadline, $('#countdown'));
      if(Date.now() >= State.deadline){
        clearInterval(countdownTimer);
        maybeFinish(true);
      }
    }, 1000);
    updateCountdownLabels(State.deadline, $('#countdown'));
  }

  function updateProgressUI(){
    const done = State.selected.filter(h=>h.done).length;
    const pct = Math.round((done / LIMIT) * 100);
    $('#progress-bar').style.width = pct + '%';
    $('#progress-text').textContent = `${done}/${LIMIT} conclu√≠dos`;
    $('#progress-percent').textContent = pct + '%';
    saveState();
  }

  function updateCountdownLabels(deadline, el){
    const now = Date.now();
    const left = Math.max(0, deadline - now);
    const totalSec = Math.floor(left/1000);
    const days = Math.floor(totalSec / 86400);
    const hours = Math.floor((totalSec % 86400) / 3600).toString().padStart(2,'0');
    const mins = Math.floor((totalSec % 3600) / 60).toString().padStart(2,'0');
    const secs = Math.floor(totalSec % 60).toString().padStart(2,'0');
    el.textContent = `${days}d ${hours}:${mins}:${secs}`;
  }

  function maybeFinish(timeout=false){
    const done = State.selected.filter(h=>h.done).length;
    if(done >= LIMIT){
      showResult(true, done);
      return true;
    }
    if(timeout || Date.now() >= State.deadline){
      showResult(false, done);
      return true;
    }
    return false;
  }

  function showResult(completed, done){
    show('result');
    const title = $('#result-title');
    const msg = $('#result-msg');
    if(completed){
      title.textContent = 'Parab√©ns! üéâ';
      msg.textContent = `Voc√™ concluiu os ${LIMIT} hobbies dentro dos ${DURATION_DAYS} dias. Incr√≠vel!`;
    } else {
      title.textContent = 'Desafio encerrado';
      msg.textContent = `Voc√™ concluiu ${done}/${LIMIT} hobbies em ${DURATION_DAYS} dias. Que tal tentar novamente?`;
    }
  }

  $('#btn-reset').addEventListener('click', ()=>{
    if(confirm('Tem certeza que deseja reiniciar o desafio? Todo o progresso ser√° apagado.')) resetAll();
  });

  $('#btn-try-again').addEventListener('click', ()=>{ resetAll(); });

  $('#btn-share').addEventListener('click', async ()=>{
    const done = State.selected.filter(h=>h.done).length;
    const text = `Meu progresso no Desafio 30 Dias de Hobbies: ${done}/${LIMIT} conclu√≠dos!`;
    try{
      if(navigator.share){ await navigator.share({text, title: document.title}); }
      else{
        await navigator.clipboard.writeText(text);
        alert('Texto copiado! Cole onde quiser e compartilhe.');
      }
    }catch(e){ }
  });

  (function boot(){
    const s = loadState();
    if(!s) return;
    Object.assign(State, s);
    hydrateDashboard();
    show('dash');
  })();
  </script>
</body>
</html>
